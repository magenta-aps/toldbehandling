stages:
  - lint
  - build
  - test

include:
  - project: 'labs/salt-automation'
    file:
      - '/gitlab-ci-templates/common/rules.v1.yml'
      - '/gitlab-ci-templates/common/saltbert.v1.yml'

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/kas

  REST_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/godsregistrering-rest:${CI_COMMIT_SHA}
  REST_IMAGE_TAG: magentaaps/godsregistrering:${CI_COMMIT_TAG}-rest

  UI_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/godsregistrering-ui:${CI_COMMIT_SHA}
  UI_IMAGE_TAG: magentaaps/godsregistrering:${CI_COMMIT_TAG}-ui

  ER_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/godsregistrering-er:${CI_COMMIT_SHA}
  ER_IMAGE_TAG: magentaaps/godsregistrering:${CI_COMMIT_TAG}-er

  VERSION: PIPELINE


# Lint stage
#############
.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.8

Lint Python:
  <<: *lint-default
  before_script:
    - pip3 install flake8
    - pip3 install black==23.1.0
    #- pip3 install -r django/requirements.txt
  script:
    - flake8 --extend-ignore E501,E226,E203 rest/
    - flake8 --extend-ignore E501,E226,E203 ui/
    - black --check --diff --exclude=migrations rest/
    - black --check --diff --exclude=migrations ui/

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

Lint REUSE compliance:
  extends: .lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

# Build stage
#############

Build REST image:
  stage: build
  needs: ["Lint Python", "Lint Dockerfiles", "Lint REUSE compliance"]
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile_rest
      --destination=${REST_IMAGE_SHA}

Build UI image:
  stage: build
  needs: ["Lint Python", "Lint Dockerfiles", "Lint REUSE compliance"]
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile_ui
      --destination=${UI_IMAGE_SHA}

Build ER image:
  stage: build
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile_er
      --destination=${ER_IMAGE_SHA}


# Test stage
############
.test-default: &test-default
  stage: test
  dependencies: []
  variables:
    # Simulate development environment while running tests so we use mockup data
    DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
    DJANGO_TIMEZONE: Europe/Copenhagen
    POSTGRES_USER: godsregistrering
    POSTGRES_PASSWORD: godsregistrering
    POSTGRES_DB: godsregistrering
    POSTGRES_HOST: godsregistrering-db
    ENVIRONMENT: development
    DISABLE_METRICS: 'True'
    DJANGO_LANGUAGE_COOKIE_DOMAIN: localhost
    SAML_ENABLED: "true"
    SAML_SP_ENTITY_ID: http://localhost:8000/saml/metadata/
    SAML_SP_LOGIN_CALLBACK_URI: http://localhost:8000/login/callback
    SAML_SP_LOGOUT_CALLBACK_URI: http://localhost:8000/logout/callback/
    SAML_SP_CERTIFICATE: /ssl/sp/selfsigned.crt
    SAML_SP_KEY: /ssl/sp/selfsigned.key
    SAML_IDP_ENTITY_ID: http://localhost:8080/simplesaml/saml2/idp/metadata.php
    SAML_IDP_LOGIN_URI: http://localhost:8080/simplesaml/saml2/idp/SSOService.php
    SAML_IDP_LOGOUT_URI: http://localhost:8080/simplesaml/saml2/idp/SingleLogoutService.php
    SAML_IDP_CERTIFICATE: /ssl/idp/selfsigned.crt
    SAML_IDP_METADATA: http://localhost:8080/simplesaml/saml2/idp/metadata.php
    SAML_CONTACT_TECHNICAL_NAME: Tester
    SAML_CONTACT_TECHNICAL_EMAIL: test@example.com
    SAML_CONTACT_SUPPORT_NAME: Tester
    SAML_CONTACT_SUPPORT_EMAIL: test@example.com
    SKIP_IDP_METADATA: "true"

Unittest REST:
  <<: *test-default
  needs: ["Build REST image"]
  image: ${REST_IMAGE_SHA}
  services:
   - name: postgres:13
     alias: kas-db
  script:
    - cd /app
    - coverage run --source='.' --omit=manage.py,project/wsgi.py,*/admin.py manage.py test
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
          coverage_format: cobertura
          path: /app/coverage.xml

Unittest UI:
  <<: *test-default
  needs: ["Build UI image"]
  image: ${UI_IMAGE_SHA}
  services:
    - name: postgres:13
      alias: kas-db
  script:
    - cd /app
    - coverage run --source='.' --omit=manage.py,project/wsgi.py,*/admin.py manage.py test
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
          coverage_format: cobertura
          path: /app/coverage.xml

Django check REST:
  <<: *test-default
  needs: [ "Build REST image" ]
  image: ${REST_IMAGE_SHA}
  services:
    - name: postgres:13
      alias: kas-db
  script:
    - cd /app
    - python manage.py check rest

Django check UI:
  <<: *test-default
  needs: [ "Build UI image" ]
  image: ${UI_IMAGE_SHA}
  services:
    - name: postgres:13
      alias: kas-db
  script:
    - cd /app
    - python manage.py check ui
